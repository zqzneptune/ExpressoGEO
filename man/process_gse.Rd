% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/process_gse.R
\name{process_gse}
\alias{process_gse}
\title{Process Affymetrix Microarray Data from GEO}
\usage{
process_gse(
  gse_accession,
  output_dir = tempdir(),
  cdf_version = "25.0.0",
  cdf_gene_map = "ensg",
  force_reprocess = FALSE
)
}
\arguments{
\item{gse_accession}{A character string specifying the GSE accession number (e.g., "GSE65656").}

\item{output_dir}{A character string specifying the directory where downloaded files
and the final RDS output will be saved. Defaults to a temporary directory.
If NULL, RDS is not saved, and ExpressionSet is returned.}

\item{cdf_version}{A character string for the custom CDF version. Defaults to "25.0.0".}

\item{cdf_gene_map}{A character string for the gene mapping type in custom CDF. Defaults to "ensg".}

\item{force_reprocess}{Logical, if TRUE, will reprocess even if an output RDS file exists.
Defaults to FALSE.}
}
\value{
An \code{ExpressionSet} object containing the normalized and annotated data.
If \code{output_dir} is specified, the \code{ExpressionSet} is also saved as an RDS file
in that directory. Returns NULL if processing fails for a platform.
}
\description{
Downloads, processes, and annotates Affymetrix microarray data for a given
Gene Expression Omnibus (GEO) Series (GSE) accession number.
It handles downloading raw CEL files, installing custom CDF packages if needed,
performing RMA normalization, and annotating genes using Ensembl via AnnotationHub.
}
\details{
This function automates several steps:
\enumerate{
\item Validates the GSE accession format.
\item Fetches metadata for the GSE using \code{GEOquery}.
\item Downloads and extracts the _RAW.tar archive containing CEL files.
\item For each platform within the GSE:
\itemize{
\item Determines the species and microarray platform type.
\item If species and platform are unique for the samples on that platform:
\itemize{
\item Constructs and installs a custom CDF package from \url{http://mbni.org/customcdf/} if not already present.
\item Reads CEL files using \code{oligo::read.celfiles} with the custom CDF.
\item Performs RMA normalization using \code{oligo::rma}.
\item Annotates probe IDs to Ensembl gene IDs and gene names using \code{AnnotationHub}.
\item Creates and returns an \code{ExpressionSet} object.
\item Saves the \code{ExpressionSet} to an RDS file if \code{output_dir} is provided.
}
\item Skips processing for platforms with mixed species or microarray types.
}
}
}
\examples{
\dontrun{
# Ensure you have a working internet connection and write permissions
# to a directory if not using tempdir().
# This example uses a known small GSE for testing.
# Replace "GSE19804" with a GSE of interest if it uses a supported platform.
# Note: GSE19804 uses hgu133plus2, which might not have a direct mbni.org ensg CDF.
# You might need to find a GSE that uses platforms like MoGene or HuGene arrays
# for the custom CDF part to work as intended by the original script.

# Example with a hypothetical GSE known to work with custom CDFs:
# gse_id <- "GSE_EXAMPLE_CUSTOM_CDF" # Replace with a real one
# eset <- process_gse(gse_id, output_dir = "./processed_data")
# if (!is.null(eset)) {
#   print(eset)
# }

# To run with a temporary directory:
# eset_temp <- process_gse("GSE_EXAMPLE_CUSTOM_CDF") # Replace
}

}
\seealso{
\code{\link[GEOquery]{getGEO}}, \code{\link[oligo]{read.celfiles}}, \code{\link[oligo]{rma}}, \code{\link[AnnotationHub]{AnnotationHub}}, \code{\link[Biobase]{ExpressionSet}}
}
